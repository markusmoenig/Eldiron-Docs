"use strict";(self.webpackChunkeldiron_docs=self.webpackChunkeldiron_docs||[]).push([[8876],{7871:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"scripting_data/reference","title":"Reference","description":"This chapter serves as a reference for scripting and data attributes used in Characters and Items in Eldiron.","source":"@site/docs/scripting_data/reference.md","sourceDirName":"scripting_data","slug":"/scripting_data/reference","permalink":"/docs/scripting_data/reference","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Reference","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Scripting and Data","permalink":"/docs/category/scripting-and-data"},"next":{"title":"Examples","permalink":"/docs/scripting_data/exmples"}}');var s=t(4848),r=t(8453);const a={title:"Reference",sidebar_position:1},c=void 0,d={},o=[{value:"Setting Basic Attributes",id:"setting-basic-attributes",level:2},{value:"<strong>Using Python (Code Tool)</strong>",id:"using-python-code-tool",level:3},{value:"<strong>Using TOML (Data Tool)</strong>",id:"using-toml-data-tool",level:3},{value:"Available Scripting Commands",id:"available-scripting-commands",level:2},{value:"Commands for Both Characters and Items",id:"commands-for-both-characters-and-items",level:3},{value:"Commands for Characters Only",id:"commands-for-characters-only",level:3},{value:"Commands for Items Only",id:"commands-for-items-only",level:3},{value:"Applying Player Actions",id:"applying-player-actions",level:3},{value:"Available Actions",id:"available-actions",level:3},{value:"Events",id:"events",level:2},{value:"System Events",id:"system-events",level:3},{value:"User Events",id:"user-events",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["This chapter serves as a reference for ",(0,s.jsx)(n.strong,{children:"scripting and data attributes"})," used in ",(0,s.jsx)(n.a,{href:"/docs/creator/characters",children:"Characters"})," and ",(0,s.jsx)(n.a,{href:"/docs/creator/items",children:"Items"})," in Eldiron."]}),"\n",(0,s.jsxs)(n.p,{children:["Since many ",(0,s.jsx)(n.strong,{children:"events, commands, and attributes"})," are shared between the two, they are ",(0,s.jsx)(n.strong,{children:"listed together"}),", with any ",(0,s.jsx)(n.strong,{children:"specific differences noted where applicable"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"This chapter is work in progress."})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"setting-basic-attributes",children:"Setting Basic Attributes"}),"\n",(0,s.jsxs)(n.p,{children:["Attributes can be set using ",(0,s.jsx)(n.strong,{children:"Python (Code Tool)"})," or ",(0,s.jsx)(n.strong,{children:"TOML (Data Tool)"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"using-python-code-tool",children:(0,s.jsx)(n.strong,{children:"Using Python (Code Tool)"})}),"\n",(0,s.jsxs)(n.p,{children:["The attributes can be set inside the templates or the ",(0,s.jsx)(n.a,{href:"/docs/creator/characters/#instances",children:"instance scripts"})," of ",(0,s.jsx)(n.strong,{children:"characters"})," or ",(0,s.jsx)(n.strong,{children:"items"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Give the character or item a name (if they differ from the template)\nset_attr("name", "Golden Key")\n\n# Set the tile ID for the character or item. Get the tile ID from the tile-picker.\nset_tile("tile_id")\n\n# Make the character or item visible / invisible\nset_attr("visible", False)\n\n# Change the collision radius for characters and items (default is 0.5)\nset_attr("radius", 0.3)\n\n# Item specific\n\n# Make the item blocking (based on its radius)\nset_attr("blocking", True)\n\n# Make the item static (doors, campfires etc.). Static items cannot be picked up.\nset_attr("static", True)\n\n# Setting general purpose attributes\nset_attr("STR", 10)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"using-toml-data-tool",children:(0,s.jsx)(n.strong,{children:"Using TOML (Data Tool)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[attributes]\n# General purpose attributes\nSTR = 10\n\n# Give the character or item a name (if they differ from the template)\nname = "Orc"\n\n# Set the tile ID for the character or item. Get the tile ID from the tile-picker\ntile_id = "tile_id"\n\n# Make the character or item visible / invisible\nvisible = false\n\n# Change the collision radius for characters and items (default is 0.5)\nradius = 0.3\n\n# Character specific\n\n# Register the character as a player character which receives user events\nplayer = true\n\n# Item specific\n\n# Make the item blocking (based on its radius)\nblocking = true\n\n# Make the item static (doors, campfires etc.). Static items cannot be picked up\nstatic = true\n\n# The worth of the item in the base currency. This is its trade value.\nworth = 0.0\n\n# This item represents money. A monetary item will not be picked up by itself but its worth is added\n# to the entities wallet.\nmonetary = false\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"available-scripting-commands",children:"Available Scripting Commands"}),"\n",(0,s.jsx)(n.h3,{id:"commands-for-both-characters-and-items",children:"Commands for Both Characters and Items"}),"\n",(0,s.jsxs)(n.p,{children:["These commands can be used for both ",(0,s.jsx)(n.strong,{children:"characters"})," and ",(0,s.jsx)(n.strong,{children:"items"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Block the listed events from being send to the character or item for the given amount\n# of in-game minutes.\nblock_events(minutes, "event1", "event2",...)\n\n# Deal damage to the given entity or item identified by its ID.\n# Damage is a Python array of information which gets send to the receiver via an\n# `take_damage` event.\n# Example: deal_damage(id, {"physical": 10})\n# Send all relevant data to the receiver who can calculate the final damage and apply it.\ndeal_damage(entity_id | item_id, damage)\n\n# Send a debug message to the Log.\ndebug(arg1, arg2, ...)\n\n# Get an attribute of the current character or item.\nget_attr("key")\n\n# Get an attribute of the given character.\nget_entity_attr(entity_id, "key")\n\n# Get an attribute of the given item.\nget_item_attr(item_id,"key")\n\n# Returns an array of filtered item ids of the given character\'s inventory.\n# Returns all items if filter_string is empty. Otherwise, returns items whose name\n# or class names contain the filter_string.\ninventory_items_of(entity_id, filter_string)\n\n# Return a list of entity ids within the radius of the character or item.\n# This has many use cases, like a door checking if it can close as no players overlap.\nentities_in_radius()\n\n# Return the name of the sector the character or item is in.\nget_sector_name()\n\n# Send the event string to the character or item after a given amount of in-game minutes.\n# By default, one in game minute is one second in real time.\nnotify_in(minutes, event_string)\n\n# Set an attribute of the current character or item. Value can be any Python value.\nset_attr("key", value)\n\n# Enables / disable entity proximity tracking. If enabled, the entity or item will receive\n# "proximity_warning" events with a list of entity ids within the radius.\n# Works similarly to entities_in_radius(), but auto generates events.\n# Use with get_entity_attr() to check for entities to take action on (attack, heal, talk etc).\nset_proximity_tracking(True / False, radius)\n\n# Send a message to the given character. Category is optional and used for coloring\n# messages in the message widget (see Screens & Widgets).\nmessage(entity_id, message, category)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"commands-for-characters-only",children:"Commands for Characters Only"}),"\n",(0,s.jsxs)(n.p,{children:["These commands are ",(0,s.jsx)(n.strong,{children:"exclusive to characters"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"\n# Creates a new item of the given class name and add it to the character's inventory.\nadd_item(class_name)\n\n# Returns an array of filtered item ids in the character's inventory.\n# Returns all items if filter_string is empty. Otherwise, returns items whose name\n# or class names contain the filter_string.\ninventory_items(filter_string)\n\n# Drops items in the character's inventory.\n# Drops all items if filter_string is empty. Otherwise, drops items whose name\n# or class names contain the filter_string.\ndrop_items(filter_string)\n\n# Loop: Walks the character in a random direction for the given distance and speed.\n# After arrival, sleeps for a random amount of in-game-minutes between max_sleep / 2 and max_sleep.\n# Example: random_walk(1.0, 1.0, 8)\n# Mostly used for NPCs\nrandom_walk(distance, speed, max_sleep)\n\n# Loop: Walks the character in a random direction in the current sector for the given distance and speed.\n# In between sleeps the character for a random amount of in-game-minutes between max_sleep / 2 and max_sleep.\n# This command is useful for NPCs that need to move around randomly without leaving a sector (shop etc.)\n# Example: random_walk_in_sector(1.0, 8)\n# Mostly used for NPCs\nrandom_walk_in_sector(distance, speed, max_sleep)\n\n# Take an item from the region. The item is removed from the region and added to the character's inventory.\ntake(item_id)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"commands-for-items-only",children:"Commands for Items Only"}),"\n",(0,s.jsxs)(n.p,{children:["These commands are ",(0,s.jsx)(n.strong,{children:"exclusive to items"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# None yet\n"})}),"\n",(0,s.jsx)(n.h3,{id:"applying-player-actions",children:"Applying Player Actions"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"action"})," command is used to trigger ",(0,s.jsx)(n.strong,{children:"player actions"})," based on user input."]}),"\n",(0,s.jsxs)(n.p,{children:["By default, a character\u2019s ",(0,s.jsx)(n.code,{children:"user_event"})," method looks like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def user_event(self, event, value):\n    if event == 'key_down':\n        if value == 'w':\n            action(\"forward\")\n        if value == 'a':\n            action(\"left\")\n        if value == 'd':\n            action(\"right\")\n        if value == 's':\n            action(\"backward\")\n    if event == 'key_up':\n            action(\"none\")\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Player characters must be registered using the ",(0,s.jsx)(n.code,{children:"player = true"})," in the characters data."]})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["These movement commands are ",(0,s.jsx)(n.strong,{children:"camera-independent"})," and work for ",(0,s.jsx)(n.strong,{children:"2D, isometric, and first-person cameras"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"available-actions",children:"Available Actions"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# 2D and Isometric: Move the player north.\n# First-Person: Move the player forward in their current facing direction.\naction("forward")\n\n# 2D and Isometric: Move the player west.\n# First-Person: Rotate the player to their left.\naction("left")\n\n# 2D and Isometric: Move the player east.\n# First-Person: Rotate the player to their right.\naction("right")\n\n# 2D and Isometric: Move the player south.\n# First-Person: Move the player backward in their current facing direction.\naction("backward")\n\n# Stop any movement / action.\naction("none")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,s.jsxs)(n.p,{children:["This is a list of events, categorized into ",(0,s.jsx)(n.strong,{children:"System Events"})," (sent to ",(0,s.jsx)(n.code,{children:"event()"}),") and ",(0,s.jsx)(n.strong,{children:"User Events"})," (sent to ",(0,s.jsx)(n.code,{children:"user_event()"}),")."]}),"\n",(0,s.jsx)(n.h3,{id:"system-events",children:"System Events"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Event Name"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"startup"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.em,{children:"(None)"})}),(0,s.jsx)(n.td,{children:"Called when the entity or item is created."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"bumped_into_entity"})})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"entity_id"})," ",(0,s.jsx)(n.em,{children:"(int)"})]}),(0,s.jsx)(n.td,{children:"Triggered when an entity bumps into another entity."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"bumped_into_item"})})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"item"})," ",(0,s.jsx)(n.em,{children:"(int)"})]}),(0,s.jsx)(n.td,{children:"Triggered when an entity bumps into an item."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"bumped_by_entity"})})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"entity_id"})," ",(0,s.jsx)(n.em,{children:"(int)"})]}),(0,s.jsx)(n.td,{children:"Triggered when another entity collides with this entity or item."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"clicked"})})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.em,{children:"dict"})," ",(0,s.jsx)(n.code,{children:"{ entity_id, distance }"})]}),(0,s.jsx)(n.td,{children:"Triggered when the player clicks on an entity or item. Includes the clicking entity's ID and distance."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"take_damage"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.em,{children:"dict"})}),(0,s.jsxs)(n.td,{children:["Triggered by the ",(0,s.jsx)(n.code,{children:"deal_damage"})," command. The dictionary contains the data passed to ",(0,s.jsx)(n.code,{children:"deal_damage()"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"user-events",children:"User Events"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Event Name"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"key_down"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.em,{children:"(string)"})}),(0,s.jsxs)(n.td,{children:["Triggered when a key is pressed. The event sends the value of the pressed key (e.g., ",(0,s.jsx)(n.code,{children:'"w"'}),", ",(0,s.jsx)(n.code,{children:'"a"'}),", ",(0,s.jsx)(n.code,{children:'"space"'}),")."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"key_up"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.em,{children:"(string)"})}),(0,s.jsxs)(n.td,{children:["Triggered when a key is released. The event sends the value of the released key (e.g., ",(0,s.jsx)(n.code,{children:'"w"'}),", ",(0,s.jsx)(n.code,{children:'"a"'}),", ",(0,s.jsx)(n.code,{children:'"space"'}),")."]})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);