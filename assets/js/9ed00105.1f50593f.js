"use strict";(self.webpackChunkeldiron_docs=self.webpackChunkeldiron_docs||[]).push([[3873],{8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}},8730:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"configuration","title":"Configuration","description":"You can configure Eldiron using the Config Tool with the in-built TOML editor.","source":"@site/docs/configuration.md","sourceDirName":".","slug":"/configuration","permalink":"/docs/configuration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Configuration","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Screens and Widgets","permalink":"/docs/screens_widgets"}}');var r=s(4848),t=s(8453);const o={title:"Configuration",sidebar_position:5},l=void 0,c={},d=[{value:"Game Configuration",id:"game-configuration",level:2},{value:"<strong>Option Descriptions</strong>",id:"option-descriptions",level:3},{value:"<code>base_currency_name</code>",id:"base_currency_name",level:4},{value:"<code>base_currency_symbol</code>",id:"base_currency_symbol",level:4},{value:"<strong>Using In-Game Time for Events</strong>",id:"using-in-game-time-for-events",level:3},{value:"Render Configuration",id:"render-configuration",level:2},{value:"<strong>Option Descriptions</strong>",id:"option-descriptions-1",level:3},{value:"Viewport Configuration",id:"viewport-configuration",level:2},{value:"<strong>Option Descriptions</strong>",id:"option-descriptions-2",level:3}];function a(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["You can configure ",(0,r.jsx)(n.strong,{children:"Eldiron"})," using the ",(0,r.jsx)(n.strong,{children:"Config Tool"})," with the in-built ",(0,r.jsx)(n.strong,{children:"TOML editor"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"game-configuration",children:"Game Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Game configuration options are located in the ",(0,r.jsx)(n.code,{children:"[game]"})," section."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[game]\n[game]\ntarget_fps = 30                # The target frames per second for the game.\ngame_tick_ms = 250             # The milliseconds per game tick.\nticks_per_minute = 4           # The amount of ticks per in-game minute.\nentity_block_mode = "always"   # The block mode, "always" or "never".\nauto_create_player = true      # Whether to auto-create a player entity.\nstart_region = ""              # The name of the region to start the game in.\nstart_screen = ""              # The name of the screen to show at startup.\n\n# Base currency configuration\nbase_currency_name = "Gold"      # Display name of the primary in-game currency.\nbase_currency_symbol = "G"       # Symbol used to represent the currency (e.g. "G" for Gold).\n'})}),"\n",(0,r.jsx)(n.h3,{id:"option-descriptions",children:(0,r.jsx)(n.strong,{children:"Option Descriptions"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"target_fps"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Defines the ",(0,r.jsx)(n.strong,{children:"refresh rate"})," of the game."]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.strong,{children:"higher FPS"})," results in ",(0,r.jsx)(n.strong,{children:"smoother gameplay"}),", but increases CPU usage."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"game_tick_ms"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Sets the ",(0,r.jsx)(n.strong,{children:"milliseconds per game tick"}),", which is ",(0,r.jsx)(n.strong,{children:"Eldiron\u2019s internal clock"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Events, actions, and player interactions are processed ",(0,r.jsx)(n.strong,{children:"each tick"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Default: ",(0,r.jsx)(n.code,{children:"250 ms"}),", meaning ",(0,r.jsx)(n.strong,{children:"4 ticks per second"})," (suitable for most games)."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"ticks_per_minute"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Defines the ",(0,r.jsx)(n.strong,{children:"number of ticks per in-game minute"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Default: ",(0,r.jsx)(n.code,{children:"4"}),", meaning ",(0,r.jsx)(n.strong,{children:"1 in-game minute = 1 real-time second"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["To sync in-game time with real time, set this value to ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"60 * 4 = 240"})}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"entity_block_mode"})})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Controls whether ",(0,r.jsx)(n.strong,{children:"entities (i.e., characters)"})," can move through each other."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"always"'})," \u2192 Entities ",(0,r.jsx)(n.strong,{children:"always block each other"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"never"'})," \u2192 Entities ",(0,r.jsx)(n.strong,{children:"never block each other"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"auto_create_player"})}),"\nIf ",(0,r.jsx)(n.code,{children:"true"}),", Eldiron will automatically ",(0,r.jsx)(n.strong,{children:"create a player instance"})," in the map if one is defined.\nUseful for quickly testing and building games without needing to implement a full character creation process.\nIf ",(0,r.jsx)(n.code,{children:"false"}),", the player must be created manually\u2014typically using a ",(0,r.jsx)(n.strong,{children:"screen"})," and ",(0,r.jsx)(n.strong,{children:"user input flow"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"start_region"})}),"\nThe ",(0,r.jsx)(n.strong,{children:"name of the region"})," the game will load when it starts.\nIf ",(0,r.jsx)(n.code,{children:"start_screen"})," is not set, this first region will be shown by default."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"start_screen"})}),"\nThe ",(0,r.jsx)(n.strong,{children:"name of the screen"})," to load on startup.\nIf empty, Eldiron will display a black screen."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"base_currency_name",children:(0,r.jsx)(n.code,{children:"base_currency_name"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"display name"})," of your game's primary currency (e.g. ",(0,r.jsx)(n.code,{children:'"Gold"'}),", ",(0,r.jsx)(n.code,{children:'"Credits"'}),")."]}),"\n",(0,r.jsx)(n.li,{children:"Used in the UI, item pricing, and trade."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"base_currency_symbol",children:(0,r.jsx)(n.code,{children:"base_currency_symbol"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.strong,{children:"short symbol"})," shown with currency values (e.g. ",(0,r.jsx)(n.code,{children:'"G"'}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Appears alongside numbers (e.g. ",(0,r.jsx)(n.code,{children:"50 G"}),", ",(0,r.jsx)(n.code,{children:"100 \ud83d\udc8e"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["[!TIP]\nA future update will introduce ",(0,r.jsx)(n.strong,{children:"custom entity block modes"})," to support ",(0,r.jsx)(n.strong,{children:"alignment-based blocking"})," and other movement rules."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"using-in-game-time-for-events",children:(0,r.jsx)(n.strong,{children:"Using In-Game Time for Events"})}),"\n",(0,r.jsxs)(n.p,{children:["Some commands use ",(0,r.jsx)(n.strong,{children:"in-game minutes"})," for timing.\nFor example, the ",(0,r.jsx)(n.code,{children:"notify_in"})," command schedules events ",(0,r.jsx)(n.strong,{children:"after a set number of in-game minutes"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'notify_in(2, "close_door")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.strong,{children:"default settings"}),", this means the event will trigger ",(0,r.jsx)(n.strong,{children:"after 2 real-time seconds"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"render-configuration",children:"Render Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Render configuration options are located in the ",(0,r.jsx)(n.code,{children:"[render]"})," section."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[render]\nsample_mode = "nearest" # "nearest" or "linear"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"option-descriptions-1",children:(0,r.jsx)(n.strong,{children:"Option Descriptions"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"sample_mode"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Defines the ",(0,r.jsx)(n.strong,{children:"interpolation mode"})," used for ",(0,r.jsx)(n.strong,{children:"scaling textures"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"nearest"'})," \u2192 ",(0,r.jsx)(n.strong,{children:"Nearest-neighbor interpolation"})," (best for pixel art)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'"linear"'})," \u2192 ",(0,r.jsx)(n.strong,{children:"Bilinear interpolation"})," (better for high-resolution textures)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recommendation:"})," Use ",(0,r.jsx)(n.code,{children:'"nearest"'})," for pixel art games to preserve crisp edges."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"viewport-configuration",children:"Viewport Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Viewport configuration defines the resolution and grid used when the game starts."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:"[viewport]\nwidth = 1280        # Width of the game viewport in pixels.\nheight = 720        # Height of the game viewport in pixels.\ngrid_size = 32      # Size of one grid tile in pixels.\n"})}),"\n",(0,r.jsx)(n.h3,{id:"option-descriptions-2",children:(0,r.jsx)(n.strong,{children:"Option Descriptions"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"width"})," / ",(0,r.jsx)(n.code,{children:"height"})]}),"\nDefines the ",(0,r.jsx)(n.strong,{children:"starting resolution"})," of the game window or screen.\nYou can adjust these values to target common resolutions like 1280\xd7720 or 1920\xd71080."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"grid_size"})}),"\nSets the ",(0,r.jsx)(n.strong,{children:"pixel size of a single tile"})," in the world/grid.\nThis affects rendering and snapping behavior in tools and the viewport layout."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);